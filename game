from user301_aNmKzZ2bht_0 import Vector
import simplegui
import random
    
WIDTH = 500
HEIGHT = 500
GRAVITY = 1
def rotateAnti(v):
    return Vector(-v.y, v.x)

class Particle:
    def __init__(self, pos, vel):
        self.pos = pos
        self.vel = vel
        self.radius = 10
        
    def draw(self, canvas):
        self.pos = pos
        self.vel = Vector()
        self.radius = max(radius, 10)
        self.colour = 'White'
        self.graivty = GRAVITY

    def draw(self, canvas):
        if(self.pos.x - self.radius>(WIDTH-50)):
            self.pos.x = (WIDTH-30)-self.radius
            canvas.draw_circle(self.pos.getP(), 30, 10, 'White', 'White')  
            print(self.pos.getP)
        elif(self.pos.x + self.radius <(50)):
            self.pos.x = 30 +self.radius
            canvas.draw_circle(self.pos.getP(), 30, 10, 'White', 'White')    
        if(self.pos.y - self.radius > WIDTH-50):
            self.pos.y = (WIDTH-30)-self.radius
            canvas.draw_circle(self.pos.getP(), 30, 10, 'White', 'White')    
        elif(self.pos.y + self.radius <(0)):
            self.pos.y = WIDTH + self.radius
            canvas.draw_circle(self.pos.getP(), 30, 10, 'White', 'White')

        canvas.draw_circle(self.pos.getP(), 30, 10, 'White', 'White')

        
    def bounce(self, normal):
        self.vel.reflect(normal)
        
    def update(self):
        self.pos.add(self.vel)
        self.vel.multiply(0.85)
        self.wrap()

    def wrap(self):
        self.pos.x %= WIDTH
        self.pos.y %= HEIGHT

class Line:
    def __init__(self, point1, point2):
        self.pA = point1
        self.pB = point2
        self.thickness = 3
        self.unit = (self.pB - self.pA).normalize()
        self.normal = rotateAnti(self.unit)
        
    def draw(self, canvas):
        canvas.draw_line(self.pA.getP(), self.pB.getP(), self.thickness, "White")
        
    def distanceTo(self, pos):
        posToA = pos - self.pA
        proj = posToA.dot(self.normal) * self.normal
        return proj.length()

    def covers(self, pos):
        return ((pos - self.pA).dot(self.unit) >= 0 and
                (pos - self.pB).dot(-self.unit) >= 0)
class Keyboard:
    def __init__(self):
        self.right = False
        self.left = False
        self.up = False
        self.space = False

    def keyDown(self, key):
        if (key == simplegui.KEY_MAP['right']):
            self.right = True
            #special
            if (key == simplegui.KEY_MAP['left']):
                self.left = False
                self.right = True

        elif (key == simplegui.KEY_MAP['left']):
            self.left = True
            if (key == simplegui.KEY_MAP['right']):
                self.right = False
                self.left = True

        elif key == simplegui.KEY_MAP['z']:
            self.up = True

        elif key == simplegui.KEY_MAP['space']:
                self.space = True

    def keyUp(self, key):
        if key == simplegui.KEY_MAP['right']:
            self.right = False

        elif key == simplegui.KEY_MAP['left']:
            self.left = False

        elif key == simplegui.KEY_MAP['z']:
            self.up = False

        elif key == simplegui.KEY_MAP['space']:
            self.space = False
            
class Interaction:
    def __init__(self, particle,keyboard, line):
        self.particle = particle
        self.keyboard = keyboard
        self.line = line
        self.inCollision = False

    def update(self):
        if self.keyboard.right:
             self.particle.vel.add(Vector(1, 0))
        if self.keyboard.left:
            self.particle.vel.add(Vector(-1, 0))
        if self.keyboard.up:
            self.particle.vel.add(Vector(0,-1))
        if self.keyboard.space:
            self.particle.vel.add(Vector(0,-2))
            print(self.particle.pos.y)
        else:
                self.particle.pos.y+=GRAVITY
        if (self.line.distanceTo(self.particle.pos) < self.line.thickness + self.particle.radius and
            self.line.covers(self.particle.pos)):
            if not self.inCollision:
                self.particle.bounce(self.line.normal)
                self.inCollision = True
        else:
            self.inCollision = False

kbd = Keyboard()
p = Particle(Vector(100, 100),
             Vector(random.randint(0, 3), random.randint(0, 3)))

l = Line(Vector(random.randint(0, WIDTH), random.randint(0, HEIGHT)),
         Vector(random.randint(0, WIDTH), random.randint(0, HEIGHT)))

i = Interaction(p,kbd, l)

def draw(canvas):
    p.draw(canvas)
    l.draw(canvas)
    p.update()
    i.update()

frame = simplegui.create_frame('Particle-line collision', WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(kbd.keyDown)
frame.set_keyup_handler(kbd.keyUp)
frame.start()
