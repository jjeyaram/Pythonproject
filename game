from user301_hPMHbpw1h9_0 import Vector
import simplegui

CANVAS_DIMS = (600, 400)
GRAVITY = 7
WIDTH = 500
HEIGHT = 500
def rotAnti(self):
    aux = self.copy()
    self.x = -aux.y
    self.y = aux.y 
    return self
def getProj(self,normal):
    n = normal.copy()
    return n.mult(self.dot(n))
class Player:
    def __init__(self, pos, radius=10):
        self.pos = pos
        self.vel = Vector()
        self.radius = max(radius, 10)
        self.colour = 'White'
        self.graivty = GRAVITY

    def draw(self, canvas):
        if(self.pos.x - self.radius>(WIDTH-50)):
            self.pos.x = (WIDTH-30)-self.radius
            canvas.draw_circle(self.pos.getP(), 30, 10, 'White', 'White')  
            print(self.pos.getP)
        elif(self.pos.x + self.radius <(50)):
            self.pos.x = 30 +self.radius
            canvas.draw_circle(self.pos.getP(), 30, 10, 'White', 'White')    
        if(self.pos.y - self.radius > WIDTH-50):
            self.pos.y = (WIDTH-30)-self.radius
            canvas.draw_circle(self.pos.getP(), 30, 10, 'White', 'White')    
        elif(self.pos.y + self.radius <(0)):
            self.pos.y = WIDTH + self.radius
            canvas.draw_circle(self.pos.getP(), 30, 10, 'White', 'White')

        canvas.draw_circle(self.pos.getP(), 30, 10, 'White', 'White')

    def update(self):
        self.pos.add(self.vel)
        self.vel.multiply(0.85)
    

class Platform:
    def __init__(self,point1,point2):
        self.pA = point1
        self.pB = point2 
        #computing the normal line 
        #self.unit = self.pB.copy().sub(self.pA).normalise()
        #normal = self.unit.copy().rotAnti()
        
    
    def distanceVector(self,pos):
        posToA = pos.copy().sub(self.pA)
        return posToA.getProj(self.normal)
    
    def distance(self,player):
        return self.distanceVector(player).length()
        
    def draw(self,canvas):
        canvas.draw_line(self.pA.getP(),self.pB.getP(),1,"red")

        
        
        
class Keyboard:
    def __init__(self):
        self.right = False
        self.left = False
        self.up = False
        self.space = False

    def keyDown(self, key):
        if (key == simplegui.KEY_MAP['right']):
            self.right = True
            #special
            if (key == simplegui.KEY_MAP['left']):
                self.left = False
                self.right = True

        elif (key == simplegui.KEY_MAP['left']):
            self.left = True
            if (key == simplegui.KEY_MAP['right']):
                self.right = False
                self.left = True

        elif key == simplegui.KEY_MAP['z']:
            self.up = True

        elif key == simplegui.KEY_MAP['space']:
                self.space = True

    def keyUp(self, key):
        if key == simplegui.KEY_MAP['right']:
            self.right = False

        elif key == simplegui.KEY_MAP['left']:
            self.left = False

        elif key == simplegui.KEY_MAP['z']:
            self.up = False

        elif key == simplegui.KEY_MAP['space']:
            self.space = False
            
class Interaction:
    def __init__(self, ball, keyboard, block):
        self.ball = ball
        self.keyboard = keyboard
        self.block = block

    def update(self):
        if self.keyboard.right:
            self.ball.vel.add(Vector(1, 0))
        if self.keyboard.left:
            self.ball.vel.add(Vector(-1, 0))
        if self.keyboard.up:
            self.ball.vel.add(Vector(0,-1))
        if self.keyboard.space:
            self.ball.vel.add(Vector(0,-3.5))
            print(self.ball.pos.y)
        else:
                self.ball.pos.y+=GRAVITY
       


kbd = Keyboard()
player = Player(Vector(WIDTH/2, HEIGHT-40))
inter = Interaction(player, kbd, Platform)
platform = Platform(Vector(100,100),Vector(200,200))
              
            
def draw(canvas):
    inter.update()
    player.update()
    player.draw(canvas) 
    platform.draw(canvas)
    
frame = simplegui.create_frame('Interactions', WIDTH, HEIGHT)
frame.set_canvas_background('#2C6A6A')
frame.set_draw_handler(draw)
frame.set_keydown_handler(kbd.keyDown)
frame.set_keyup_handler(kbd.keyUp)
frame.start()
