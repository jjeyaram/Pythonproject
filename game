from user301_aNmKzZ2bht_0 import Vector
import simplegui
import random
    
WIDTH = 500
HEIGHT = 500
GRAVITY = 2
BALL_RADUIUS = 10
def rotateAnti(v):
    return Vector(-v.y, v.x)

class Player:
    def __init__(self, pos, vel):
        self.pos = pos
        self.vel = vel
        self.radius = BALL_RADUIUS 
        
    def draw(self, canvas):
        self.pos = pos
        self.vel = Vector()
        self.radius = max(radius, BALL_RADUIUS)
        self.colour = 'White'
        self.graivty = GRAVITY

    def draw(self, canvas):
        #if(self.pos.x - self.radius>(WIDTH-50)):
         #   self.pos.x = (WIDTH-30)-self.radius
          #  canvas.draw_circle(self.pos.getP(), BALL_RADUIUS, BALL_RADUIUS, 'White', 'White')  
        #if(self.pos.x + self.radius <(50)):
        #    self.pos.x = 30 +self.radius
         #   canvas.draw_circle(self.pos.getP(), BALL_RADUIUS, BALL_RADUIUS, 'White', 'White')    
        #if(self.pos.y - self.radius > WIDTH-50):
         #   self.pos.y = (WIDTH-30)-self.radius
        #    canvas.draw_circle(self.pos.getP(),BALL_RADUIUS , BALL_RADUIUS, 'White', 'White')    
       # if(self.pos.y  < 50):
       #     self.pos.y = 60
       #     canvas.draw_circle(self.pos.getP(), BALL_RADUIUS, BALL_RADUIUS, 'White', 'White')

       canvas.draw_circle(self.pos.getP(), BALL_RADUIUS, BALL_RADUIUS, 'White', 'White')

        
    def bounce(self, normal):
        self.vel.reflect(normal)
        
    def update(self):
        self.pos.add(self.vel)
        self.vel.multiply(0.85)
        self.wrap()

    def wrap(self):
        self.pos.x %= WIDTH
        self.pos.y %= HEIGHT

class Line:
    def __init__(self, point1, point2):
        self.pA = point1
        self.pB = point2
        self.thickness = 3
        self.unit = (self.pB - self.pA).normalize()
        self.normal = rotateAnti(self.unit)
        
    def draw(self, canvas):
        canvas.draw_line(self.pA.getP(), self.pB.getP(), self.thickness, "White")
        
    def distanceTo(self, pos):
        posToA = pos - self.pA
        proj = posToA.dot(self.normal) * self.normal
        return proj.length()

    def covers(self, pos):
        return ((pos - self.pA).dot(self.unit) >= 0 and
                (pos - self.pB).dot(-self.unit) >= 0)
class Keyboard:
    def __init__(self):
        self.right = False
        self.left = False
        self.up = False
        self.space = False

    def keyDown(self, key):
        if (key == simplegui.KEY_MAP['right']):
            self.right = True
            #special
            if (key == simplegui.KEY_MAP['left']):
                self.left = False
                self.right = True

        elif (key == simplegui.KEY_MAP['left']):
            self.left = True
            if (key == simplegui.KEY_MAP['right']):
                self.right = False
                self.left = True

        elif key == simplegui.KEY_MAP['z']:
            self.up = True

        elif key == simplegui.KEY_MAP['space']:
                self.space = True

    def keyUp(self, key):
        if key == simplegui.KEY_MAP['right']:
            self.right = False

        elif key == simplegui.KEY_MAP['left']:
            self.left = False

        elif key == simplegui.KEY_MAP['z']:
            self.up = False

        elif key == simplegui.KEY_MAP['space']:
            self.space = False
            
class Interaction:
    def __init__(self, player,keyboard, line):
        self.player = player
        self.keyboard = keyboard
        self.line = line
        self.inCollision = False

    def update(self):
        if self.keyboard.right:
             self.player.vel.add(Vector(1, 0))
        if self.keyboard.left:
            self.player.vel.add(Vector(-1, 0))
        if self.keyboard.up:
            self.player.vel.add(Vector(0,0))
        if self.keyboard.space:
            self.player.vel.add(Vector(0,-0.5))
        else:
            self.inCollision = False 
            self.player.vel.add(Vector(0,0.5))
        if (self.line.distanceTo(self.player.pos) < self.line.thickness + self.player.radius and
            self.line.covers(self.player.pos)):
            if not self.inCollision:
                self.player.bounce(self.line.normal)
                self.inCollision = True
        else:
            self.inCollision = False

kbd = Keyboard()
p = Player(Vector(0,0),Vector(0,0))
#top
top = Line(Vector(0, 0),Vector(500,0))
bottom= Line(Vector(0, WIDTH),Vector(500,500))
right = Line(Vector(500, 0),Vector(500,500))
left= Line(Vector(0, 0),Vector(0,500))
i = Interaction(p,kbd, top)
i2 = Interaction(p,kbd, bottom)
i3 = Interaction(p,kbd, right)
i4 = Interaction(p,kbd, left)
def draw(canvas):
    p.draw(canvas)
    top.draw(canvas)
    bottom.draw(canvas)
    right.draw(canvas)
    left.draw(canvas)
    p.update()
    i.update()
    i2.update()
    i3.update()
    i4.update()
frame = simplegui.create_frame('Game', WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(kbd.keyDown)
frame.set_keyup_handler(kbd.keyUp)
frame.start()
