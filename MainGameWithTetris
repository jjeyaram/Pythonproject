#Main with tetris
#The tetris and the game open in seperate windows though
from user301_aNmKzZ2bht_0 import Vector
import simplegui
import random
import time    
WIDTH = 500
HEIGHT = 500
GRAVITY = 2
BALL_RADUIUS = 10
start_level = 0
Twidth = 10
Theight = 22
block_size = 40
WIDTH = 500
HEIGHT = 500
frame_width = 16
frame_height = 22
#scoring
num_cleared = 0
level = 0
#define initial grid
grid = [[7 for j in range(Theight)] for i in range(Twidth)]
# define dictionary to lookup color from grid values
color_Dict = {0:"Aqua", 1:"Orange", 2:"Blue", 3:"Purple", \
                    4:"Red", 5:"Lime", 6:"Yellow", 7:"White", \
                    8: "Black"}

def rotateAnti(v):
    return Vector(-v.y, v.x)
class Tetris:
     
    #Player preferences
    global start_level 
    #setting up the gui stuff
    global width 
    global height 
    global block_size 
    global WIDTH 
    global HEIGHT 
    global frame_width 
    global frame_height
    global num_cleared
    global level
    global grid 
    global color_Dict 
    
def draw_block(c,pos,color):
        c.draw_polygon([[pos[0],pos[1]],[pos[0]+block_size, \
                        pos[1]],[pos[0]+block_size, \
                        pos[1]+block_size],[pos[0], \
                        pos[1]+block_size]],1,"White",color)

def draw(c):
        global frame_height
        global block_size
        global pos_list
        global num_cleared
        global score
        global level
        global start_level
        global width
        next_piece_offset = [(Twidth-2)*block_size, \
                            (2)*block_size]
        #print next_piece_offset

        for i in range(Twidth):
            for j in range(Theight):
                draw_block(c,[i*block_size,j*block_size], \
                            color_Dict[grid[i][j]])


class Blocks:

        def __init__(self):
            #0:"I", 1:"L", 2:"J", 3:"T", 4:"Z", 5:"S", 6:"O" 
                #O is a character not an int
            #self.block_dict = {0:"Aqua", 1:"Orange", \
                               #2:"Blue", 3:"Purple", 4:"Red",\
                               #5:"Lime", 6:"Yellow"}
            self.choice = random.randint(0,6) #last number 
                                    #should be 6 and first 0
            self.next_piece = random.randint(0,6)
            self.piece_dict = {0:[[3,0],[4,0],[5,0],[6,0]], \
                                1:[[4,1],[5,1],[6,1],[6,0]], \
                                2:[[4,0],[4,1],[5,1],[6,1]], \
                                3:[[4,1],[5,1],[6,1],[5,0]], \
                                4:[[4,0],[5,0],[5,1],[6,1]], \
                                5:[[5,0],[6,0],[4,1],[5,1]], \
                                6:[[4,0],[5,0],[4,1],[5,1]]}

        def create_piece(self):
            """Puts all 4 blocks together at the initial drop
                zone"""
            self.choice = self.next_piece
            self.next_piece = random.randint(0,6)
            self.piece = self.piece_dict[self.choice]

        def move_piece(self, offset):
            """This function updates the piece's blocks' 
                position the offset is a list with two 
                elements. ex [0,1]"""
            global grid
            tmp = self.piece
            for block_idx in range(len(tmp)):
                self.piece[block_idx] = [tmp[block_idx][0]+\
                                        offset[0], \
                                        tmp[block_idx][1]+\
                                        offset[1]]
            for block in self.piece: #coloring
                grid[block[0]][block[1]] = self.choice



                #coloring
                for pos in self.piece:
                    grid[pos[0]][pos[1]] = self.choice


def check_fall():
        """Checks if the piece can fall"""
        fall = True
        global pos_list
        for pos in pos_list.piece:#seeing if the piece 
                                    #needs to stop
            if pos[1] == Theight-1: #seperate to avoid indexing
                                    #errors in the elif
                fall = False
                break
        return fall

class Theme:
        def __init__(self):
            self.last_time = time.time()

        def check_restart(self):
            if time.time() - self.last_time > 48: #0:48 = music length
                self.last_time = time.time()



def my_update():
        """updates the blocks' positions"""
        global pos_list
        global grid
        global song_them
        global num_cleared
        global score
        global level
        global start_level

        lines_bonus = {0:0, 1:40, 2:100, 3:300, 4:1200}

        #finding the lowest block
        #21 is the bottom and 0 is the top
        lowest_val = -1
        lowest_blocks = []
        for pos in pos_list.piece:
            if pos[1] > lowest_val:
                lowest_val = pos[1]
                lowest_blocks = []
                lowest_blocks.append(pos)
            if pos[1] == lowest_val:
                lowest_blocks.append(pos)

        fall = check_fall()

        #move the piece
        if fall == True:
            #update old squares to be white
            for block in pos_list.piece:
                grid[block[0]][block[1]]= 7
            #draws the new piece
            pos_list.move_piece([0,1])

        lose_flag = False
        if fall == False:
            for pos in pos_list.piece:
                if pos[1] == 0:
                    lose_flag = True
                    break

        if lose_flag == False and fall == False:
            remove_lines = check_line()
            num_cleared += len(remove_lines)

            if num_cleared >= (level+1)*10:
                level += 1
            clear_lines(remove_lines)
            pos_list.create_piece()


def check_line():
        global grid
        #populating the list
        remove_lines = []
        for i in range(Theight):
            remove_lines.append(i)  
        tmp = grid
        for row_idx in range(len(tmp[0])):
            for col_idx in range(len(tmp)):
                if tmp[col_idx][row_idx] == 7:
                    if row_idx in remove_lines:
                        remove_lines.remove(row_idx)

        return remove_lines

def clear_lines(remove_lines):
        """This function clears lines"""
        global grid
        tmp = grid
        for line_num in remove_lines:
            for col_idx in range(len(tmp)):            
                remove_lines.remove(row_idx)

        #updates the grid after the lines are removed
        tmp = grid
    # initialize position of first block
pos_list = Blocks()
pos_list.create_piece()

f = simplegui.create_frame("Tetris Background",\
                                WIDTH, \
                                HEIGHT, 200)
f.set_canvas_background("White")
f.set_draw_handler(draw)

    # create and start timer for block motion
t = simplegui.create_timer(1000.0/(start_level+level+1), \
                                        my_update)
t.start()

f.start()

class Player:
    def __init__(self, pos, vel):
        self.pos = pos
        self.vel = vel
        self.radius = BALL_RADUIUS 
        
    def draw(self, canvas):
        self.pos = pos
        self.vel = Vector()
        self.radius = max(radius, BALL_RADUIUS)
        self.colour = 'White'
        self.graivty = GRAVITY

    def draw(self, canvas):
        #if(self.pos.x - self.radius>(WIDTH-50)):
         #   self.pos.x = (WIDTH-30)-self.radius
          #  canvas.draw_circle(self.pos.getP(), BALL_RADUIUS, BALL_RADUIUS, 'White', 'White')  
        #if(self.pos.x + self.radius <(50)):
        #    self.pos.x = 30 +self.radius
         #   canvas.draw_circle(self.pos.getP(), BALL_RADUIUS, BALL_RADUIUS, 'White', 'White')    
        #if(self.pos.y - self.radius > WIDTH-50):
         #   self.pos.y = (WIDTH-30)-self.radius
        #    canvas.draw_circle(self.pos.getP(),BALL_RADUIUS , BALL_RADUIUS, 'White', 'White')    
       # if(self.pos.y  < 50):
       #     self.pos.y = 60
       #     canvas.draw_circle(self.pos.getP(), BALL_RADUIUS, BALL_RADUIUS, 'White', 'White')

       canvas.draw_circle(self.pos.getP(), BALL_RADUIUS, BALL_RADUIUS, 'White', 'White')

        
    def bounce(self, normal):
        self.vel.reflect(normal)
        
    def update(self):
        self.pos.add(self.vel)
        self.vel.multiply(0.85)
        self.wrap()

    def wrap(self):
        self.pos.x %= WIDTH
        self.pos.y %= HEIGHT

class Line:
    def __init__(self, point1, point2):
        self.pA = point1
        self.pB = point2
        self.thickness = 3
        self.unit = (self.pB - self.pA).normalize()
        self.normal = rotateAnti(self.unit)
        
    def draw(self, canvas):
        canvas.draw_line(self.pA.getP(), self.pB.getP(), self.thickness, "White")
        
    def distanceTo(self, pos):
        posToA = pos - self.pA
        proj = posToA.dot(self.normal) * self.normal
        return proj.length()

    def covers(self, pos):
        return ((pos - self.pA).dot(self.unit) >= 0 and
                (pos - self.pB).dot(-self.unit) >= 0)
class Keyboard:
    def __init__(self):
        self.right = False
        self.left = False
        self.up = False
        self.space = False

    def keyDown(self, key):
        if (key == simplegui.KEY_MAP['right']):
            self.right = True
            #special
            if (key == simplegui.KEY_MAP['left']):
                self.left = False
                self.right = True

        elif (key == simplegui.KEY_MAP['left']):
            self.left = True
            if (key == simplegui.KEY_MAP['right']):
                self.right = False
                self.left = True

        elif key == simplegui.KEY_MAP['z']:
            self.up = True

        elif key == simplegui.KEY_MAP['space']:
                self.space = True

    def keyUp(self, key):
        if key == simplegui.KEY_MAP['right']:
            self.right = False

        elif key == simplegui.KEY_MAP['left']:
            self.left = False

        elif key == simplegui.KEY_MAP['z']:
            self.up = False

        elif key == simplegui.KEY_MAP['space']:
            self.space = False
            
class Interaction:
    def __init__(self, player,keyboard, line):
        self.player = player
        self.keyboard = keyboard
        self.line = line
        self.inCollision = False

    def update(self):
        if self.keyboard.right:
             self.player.vel.add(Vector(1, 0))
        if self.keyboard.left:
            self.player.vel.add(Vector(-1, 0))
        if self.keyboard.up:
            self.player.vel.add(Vector(0,0))
        if self.keyboard.space:
            self.player.vel.add(Vector(0,-0.5))
        else:
            self.inCollision = False 
            self.player.vel.add(Vector(0,0.5))
        if (self.line.distanceTo(self.player.pos) < self.line.thickness + self.player.radius and
            self.line.covers(self.player.pos)):
            if not self.inCollision:
                self.player.bounce(self.line.normal)
                self.inCollision = True
        else:
            self.inCollision = False

kbd = Keyboard()
p = Player(Vector(0,0),Vector(0,0))
#top
top = Line(Vector(0, 0),Vector(500,0))
bottom= Line(Vector(0, WIDTH),Vector(500,500))
right = Line(Vector(500, 0),Vector(500,500))
left= Line(Vector(0, 0),Vector(0,500))
i = Interaction(p,kbd, top)
i2 = Interaction(p,kbd, bottom)
i3 = Interaction(p,kbd, right)
i4 = Interaction(p,kbd, left)
def draw(canvas):
    p.draw(canvas)
    top.draw(canvas)
    bottom.draw(canvas)
    right.draw(canvas)
    left.draw(canvas)
    p.update()
    i.update()
    i2.update()
    i3.update()
    i4.update()
frame = simplegui.create_frame('Game', WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(kbd.keyDown)
frame.set_keyup_handler(kbd.keyUp)
frame.start()
